import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objects as go

# Load and preprocess data
data = pd.read_csv("Data_File.csv")
data['Date'] = pd.to_datetime(data['Date'], dayfirst=True, errors='coerce')
data = data.dropna(subset=['Date'])  # Drop rows with invalid dates

# Initialize the Dash app
app = dash.Dash(__name__)

# App layout
app.layout = html.Div([
    html.H1("Supply Optimization - November 2024"),

    # Input for initial Stock Holding value
    html.Label("Enter Initial Stock Holding Value:"),
    dcc.Input(id='stock-input', type='number', value=5000),  # Default initial stock value

    # Date input to specify when the stock holding change should begin
    html.Label("Select Date to Start Stock Change:"),
    dcc.DatePickerSingle(
        id='change-date-input',
        min_date_allowed=data['Date'].min(),
        max_date_allowed=data['Date'].max(),
        date=data['Date'].min()  # Default to the first date in the dataset
    ),

    # Graph to display the interactive line plot
    dcc.Graph(id='supply-optimization-graph')
])

# Update the graph based on Stock Holding input and start date
@app.callback(
    Output('supply-optimization-graph', 'figure'),
    [Input('stock-input', 'value'),
     Input('change-date-input', 'date')]
)
def update_graph(initial_stock_holding, change_date):
    # Convert the input date to a timestamp
    change_date = pd.to_datetime(change_date)

    # Copy data to calculate decreasing Stock_Holding over time
    temp_data = data.copy()

    # Initialize stock holding list starting with the input value
    stock_holding = []
    stock = initial_stock_holding
    change_started = False

    # Calculate the stock holding decrease over time based on demand, starting from the selected date
    for index, row in temp_data.iterrows():
        if row['Date'] >= change_date:
            change_started = True

        # Update stock holding based on demand if the change date has started
        if change_started:
            stock = max(stock - row['Demand'], 0)  # Subtract demand and ensure stock doesnâ€™t go below zero

        stock_holding.append(stock)

    # Assign the calculated stock values to the DataFrame
    temp_data['Stock_Holding'] = stock_holding

    # Create figure with updated Stock_Holding
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=temp_data['Date'], y=temp_data['Demand'], mode='lines', name='Demand'))
    fig.add_trace(go.Scatter(x=temp_data['Date'], y=temp_data['Price'], mode='lines', name='Price', yaxis="y2"))
    fig.add_trace(go.Scatter(x=temp_data['Date'], y=temp_data['Stock_Holding'], mode='lines', name='Stock_Holding'))

    # Customize layout
    fig.update_layout(
        title="Supply Optimization - November 2024",
        xaxis_title="Date",
        yaxis_title="Volume (m3)",
        legend_title="Metrics",
        template="plotly_white",
        hovermode="x unified",
        yaxis2=dict(
            title="Platts Price (USD/MT)",
            overlaying='y',
            side='right',
            showgrid=False
        ),
        legend=dict(
            orientation='h',
            yanchor='bottom',
            y=-0.2,
            xanchor='center',
            x=0.5
        )
    )

    # Add range sliders and selectors for zoom
    fig.update_xaxes(
        rangeslider_visible=True,
        rangeselector=dict(
            buttons=list([
                dict(count=1, label="1m", step="month", stepmode="backward"),
                dict(count=6, label="6m", step="month", stepmode="backward"),
                dict(count=1, label="YTD", step="year", stepmode="todate"),
                dict(count=1, label="1y", step="year", stepmode="backward"),
                dict(step="all")
            ])
        )
    )

    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
